#!/bin/bash
#
# onodera - onodera at openmailbox dot org
# A script to easily play and manage your animu/kdrama/etc.

## CONFIGURATION

# Set media and neet dir locations
mediadir="$HOME/tmp/downloads"
neetdir="$HOME/etc/neet"

# Set colors
foreground="\e[0;39m"
brown="\e[1;33m"
red="\e[1;30m"

## FUNCTIONS

# This fucntion gets basic media info, like the active show name, episode count and total episodes
info() {
	# Outputs entire list
	list="$(cat "$neetdir/list")"

	# Get the active show (+)
	active="$(echo "$list" | grep "+")"

	# Get the show name, current episode and total episode count
	name="$(echo "$active" | cut -d "|" -f 2- | cut -c 2-)"
	if [[ -z "$current" ]]; then
		current="$(echo "$active" | cut -d "/" -f 1 | cut -d "[" -f 2-)"
	fi
	total="$(echo "$active" | cut -d "]" -f 1 | cut -d "/" -f 2-)"
}

# This function tries to fuzzy find the right directory
directory() {
	# Lists all directories in mediadir
	directories="$(ls -d "$mediadir/"*/ | rev | cut -d "/" -f -2 | rev)"

	# This is the actual fuzzy logic part, it compares the directory names with the active show name
	# TODO: Make this only grep whole words
	IFS=$'\n'
	matches="$(
		for directory in $directories; do
			for word in $name; do
				# TODO: should IFS be unset here? seem logical but works better with set IFS...
				unset IFS
				echo "$directory" | grep -i "$(echo "$word" | tr -d ",")"
			done
		done | uniq -c | sed "s/   *//g" | sort | tac
	)"

	# This greps the output wiith the most matches
	path="$(echo "$matches" | head -n 1 | cut -d " " -f 2-)"

	# Logic for if there are two or more matches with nearly identical names
	# TODO: make count real
	count=1
	if [[ "$count" -ge 2 ]]; then
		if [[ -n "$(grep "$name" "$neetdir/save")" ]]; then
			mostlikely="$(cut -d "|" -f 2- "$neetdir/save" | cut -c 2-)"
		else
			echo -e "There are $count directories that match $brown$name$foreground:\n" 
			# TODO: Add grep color here like in aiko
			echo -e "$(echo "$mostlikely" | uniq | nl | sed "s/^ */  /g")\n"
			read -p "Which directory would you like to use? [1-$count] " answer
			case "$answer" in
				[1-$count])
					mostlikely="$(echo "$mostlikely" | cut -d $'\n' -f $answer)"
					echo ""
					echo -e -n "Would you like to make this the default answer for $brown$name$foreground? [Y/n] "
					read -p "" answer
					case "$answer" in
						[Nn*])
							echo ""
							;;

						*)
							# TODO: Doesn't support multiple shows/lines
							echo "$name | $mostlikely" > "$neetdir/save"
							echo ""
							;;
					esac
					;;
				*)
					exit
					;;
			esac
		fi
	# Throw error if there are no directory matches
	elif [[ "$count" -eq 0 ]] && [[ -z "$debug" ]]; then
		echo -e "No ${brown}directory$foreground match found, run neet -d for debug info."
		exit
	fi
}

# This function tries to get the right file name
episode() {
	# Lists all video files in the directory
	episodes="$(ls "$mediadir/$path" | grep ".avi$\|.mkv$\|.mp4$")"

	# Calculates the zeros in a file name (for example two in 002 and one in 089)
	zerocount="$(($(echo "$total" | wc -c) - $(echo "$current" | wc -c)))"
	if [[ "$zerocount" -gt 0 ]]; then
		zero="$(printf "0%.0s" $(seq "$zerocount"))"
	fi

	# Greps the right file (hopefully)
	format="$(echo "$episodes" | grep "E$zero$current\| $zero$current")"

	# Throws error if there is not file that matches
	count="$(echo "$format" | grep -v "^$" | wc -l)"
	if [[ "$count" -eq 0 ]] && [[ -z "$debug" ]]; then
		echo -e "No ${brown}episode$foreground match found, run neet -d for debug info."
		exit
	fi
}

# This function pauses mpd, and starts mpv
play() {
	echo -e "Playing episode $current/$total, $brown$name$foreground."
	mpc -q pause
	mpv --fullscreen "$mediadir/$path$format"
}

## EXECUTE

shopt -s extglob

if [[ "$#" -ge 1 ]]; then
	case "$1" in
		-h|--help)
#			echo "-a         add escapism" # TODO
#			echo "-c escp    set current escapism" # TODO
			echo "-d         debug info"
			echo "-e         edit list"
#			echo "-s         sort list" # TODO
			echo "+(++...)   increment ep"
			echo "-(--...)   decrement ep"
			echo "           play"
			;;
		-a)
			info

			read -p "Escapism name: " inputname
			while read -p "Episode count: " inputtotal; do
				if [[ -n "$(echo "$inputtotal" | grep -o "[A-Za-z]")" ]]; then
					echo -e "${brown}Episode count can only contain numbers, try again.$foreground"
				else
					break
				fi
			done
			while read -p "Catagory/genre: " inputcatagory; do
				if [[ -z "$(echo "$list" | grep "#" | grep "| $inputcatagory$")" ]]; then
					echo -e "${brown}Catagory $inputcatagory not in list, try again.$foreground"
				else
					break
				fi
			done
			echo ""
			echo -e "Adding $brown$inputname$foreground with $brown$inputtotal$foreground episodes to $brown$inputcatagory$foreground."
			read -p "Is this information correct? [Y/n] " answer
			case "$answer" in
				[Nn*])
					exit
					;;
				*)
					width="$(echo "$inputtotal" | wc -m)"
					count="$((5 - width))"
					# TODO: space="$(printf " %.0s" $(eval echo "{1..$count}"))"
					space="$(printf " %.0s" $(seq "$count"))"

					sed -i "/#         \| $inputcatagory/a - \[1\/$inputtotal\]$space\| $inputname" "$neetdir/list"
					echo ""
					echo "Added $inputcatagory to list."

					# TODO: Finish sort and uncomment this
					# neet -s
					;;
			esac
			;;
		-c)
			# TODO: Finish this
			;;
		-d)
			debug=true
			info
			directory
			episode

			echo -e "${red}CONFIGURATION$foreground"
			echo -e "    mediadir = $brown$mediadir$foreground"
			echo -e "    neetdir = $brown$neetdir$foreground"
			echo ""
			echo -e "${red}FUNCTION - info$foreground"
			echo -e "    name = $brown$name$foreground"
			echo -e "    current = $brown$current$foreground"
			echo -e "    total = $brown$total$foreground"
			echo ""
			echo -e "${red}FUNCTION - directory$foreground"
			echo -e "$( echo "$matches" | sed "s/ / = \\$brown/1" | sed "s/$/\\$foreground/g" | sed "s/^/    /g")"
			echo ""
			echo -e "    path = $brown$mediadir/$path$foreground"
			echo ""
			echo -e "${red}FUNCTION - episode$foreground"
			echo -e "    zero = $brown$zero (zerocount = $zerocount)$foreground"
			echo -e "    format = $brown$format$foreground"
			echo ""
			echo -e "${red}FUNCTION - play$foreground"
			echo "    $mediadir/$path$format"
			if [[ -f "$mediadir/$path$format" ]]; then
				echo -e "    ${brown}File exists!$foreground"
			else
				echo -e "    ${brown}File does NOT exist!$foreground"
			fi
			;;
		-e)
			$EDITOR "$neetdir/list"
			;;
		-s)
			info

			count="$(grep -c "#" "$neetdir/list")"

			for number in $(eval echo "{1..$count}"); do
				# TODO: Finish this
				echo -e "Sorted $brown$(grep -m $number "#" "$neetdir/list" | tail -n 1 | cut -d " " -f 11- | tr -d "\r" | tr -d "\n")$foreground list."
			done

			echo -e "$active\n\n$sort1\n$sort2" > ~/test
			;;
		+(+))
			info

			# Get current episode and increment it by one
			amount="$(echo "$1" | wc -m)"
			increment="$((current - 1 + amount))"

			shift
			if [[ "$increment" -le "$total" ]]; then
				sed -i "s/+ \[$current\/$total\]/+ \[$increment\/$total\]/" "$neetdir/list"
				current="$increment"

				directory
				episode
				play
			else
				# This gets the "genre" for example anime or kdrama
				category="$(echo "$list" | grep -B 32 "+" | grep "#" | tail -n 1 | cut -d "|" -f 2- | cut -c 2- | head -c -1)"

				echo -n -e "$brown$name$foreground completed! Would you like to remove this $category? [y/N] "
				read -p "" answer
				case "$answer" in
					[Yy]*)
						sed -i "/$name/d" "$neetdir/list"
						;;
					*)
						exit
						;;
				esac
			fi
			shift
			;;
		+(-))
			info

			# Get current episode and decrement it by one
			amount="$(echo "$1" | wc -m)"
			decrement="$((current + 1 - amount))"

			shift
			if [[ "$decrement" -ge 1 ]]; then
				sed -i "s/+ \[$current\/$total\]/+ \[$decrement\/$total\]/" "$neetdir/list"
				current="$decrement"

				directory
				episode
				play
			else
				echo "Can't go lower than 1!"
			fi
			shift
			;;
		*)
			echo "Invalid option, use -h for help."
			;;
	esac
else
	info
	directory
	episode
	play
fi
