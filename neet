#!/bin/bash
#
# neet - A script to easily play and manage your anime/kdrama/etc.
# onodera, https://github.com/onodera-punpun

## CONFIGURATION

# Set media and config dir locations
configdir="$HOME/.neet"
mediadir="$HOME/tmp/downloads"

# Pause mpd on play (requires mpc)
pausempd=true

# mpv launch options
options="--fullscreen"

# Set colors
fg="\e[0;39m"
c1="\e[1;33m"
c2="\e[1;30m"


## FUNCTIONS

# This function gets basic media info, like the active show name, episode count and total episodes
info() {
	# Outputs entire list
	list="$(cat "$configdir/list")"

	# Get the active show (+)
	active="$(echo "$list" | grep -B 1 "+")"

	# Get the show name, current episode and total episode count
	name="$(echo "$active" | head -n 1)"
	if [[ -z "$current" ]]; then
		current="$(echo "$active" | tail -n 1 | cut -d "/" -f 1 | cut -c 3-)"
	fi
	total="$(echo "$active" | tail -n 1 | cut -d "/" -f 2)"
}

# This function tries to fuzzy find the right directory
directory() {
	# Lists all directories in mediadir
	directories="$(ls -d "$mediadir/"*/ | rev | cut -d "/" -f -2 | rev)"

	# This is the actual fuzzy logic part, it compares the directory names with the active show name
	# TODO: Make this only grep whole words
	IFS=$'\n'
	matches="$(
		for directory in $directories; do
			for word in $name; do
				# TODO: should IFS be unset here? seem logical but works better with set IFS...
				unset IFS
				echo "$directory" | grep -i "$(echo "$word" | tr -d ",")"
			done
		done | uniq -c | sed "s/   *//g" | sort | tac
	)"

	# This greps the output wiith the most matches
	highest="$(echo "$matches" | head -c 1)"
	path="$(echo "$matches" | grep "^$highest " | cut -d " " -f 2-)"

	# Count results
	directorycount="$(echo "$path" | wc -l)"

	# Logic for if there are two or more matches with nearly identical names
	if [[ "$directorycount" -ge 2 ]]; then
		if [[ -n "$(grep "^$name=" "$configdir/save")" ]]; then
			path="$(grep "^$name=" "$configdir/save" | cut -d "=" -f 2)"
		else
			echo -e "There are $directorycount directories that match $c1$name$fg:"
			echo ""
			echo -e "$(echo "$path" | uniq | nl | sed "s/	/ /g")"
			echo ""
			read -p "Which directory would you like to use? [1-$directorycount] " answer
			if [[ -n "$(seq "$directorycount" | grep "^$answer$")" ]]; then
				echo ""
				echo "Directory set."
				echo "$name=$(echo "$path" | cut -d $'\n' -f $answer)" > "$configdir/save"
				path="$(echo "$path" | cut -d $'\n' -f $answer)"
				echo ""
			else
				echo "$answer is not a valid answer."
				exit 1
			fi
		fi
	# Throw an error if there are no directory matches
	elif [[ "$directorycount" -eq 0 ]] && [[ -z "$debug" ]]; then
		echo -e "No ${c1}directory$fg match found, use 'neet -d' for debug info."
		exit
	fi
}

# This function tries to get the right file name
episode() {
	# Lists all video files in the directory
	episodes="$(ls "$mediadir/$path" | grep ".avi$\|.mkv$\|.mp4$")"

	# Calculates the zeros in a file name (for example two in 002 and one in 089)
	zerocount="$(($(echo "$total" | wc -c) - $(echo "$current" | wc -c)))"
	if [[ "$zerocount" -gt 0 ]]; then
		zero="$(printf "0%.0s" $(seq "$zerocount"))"
	fi

	# Greps the right file (hopefully)
	# Currently supports "E01", "ep01" & " 01"
	format="$(echo "$episodes" | grep "E$zero$current\|ep$zero$current\| $zero$current")"

	# Throws error if there is not file that matches
	episodecount="$(echo "$format" | grep -v "^$" | wc -l)"
	if [[ "$episodecount" -eq 0 ]] && [[ -z "$debug" ]]; then
		echo -e "No ${c1}episode$fg match found, use 'neet -d' for debug info."
		exit
	fi
# TODO: Change to options
}

# This function pauses mpd, and starts mpv
play() {
	echo -e "Playing episode $current/$total, $c1$name$fg."

	# Pause mpd
	if [[ "$pausempd" == true ]]; then
		mpc -q pause
	fi

	# Start mpv
	mpv $options "$mediadir/$path$format"
}


## EXECUTE

shopt -s extglob

if [[ "$#" -ge 1 ]]; then
	case "$1" in
		-h|--help)
			echo "usage: neet [options]"
			echo "options:"
#			echo "-a         add media" # TODO
			echo "  -a,   --active              set active media"
			echo "  -d,   --debug               display debug info"
			echo "  -e,   --edit                edit list"
			echo "  +(++...)                    increment playing episode"
			echo "  -(--...)                    decrement playing episode"
			echo "  -v,   --version             print version and exit"
			echo "  -h,   --help                print help and exit"
			exit 0
			;;
		#-a)
		#	info

		#	read -p "Media name: " inputname
		#	while read -p "Episode count: " inputtotal; do
		#		if [[ -n "$(echo "$inputtotal" | grep -o "[A-Za-z]")" ]]; then
		#			echo -e "${c1}Episode count can only contain numbers, try again.$fg"
		#		else
		#			break
		#		fi
		#	done
		#	while read -p "Catagory/genre: " inputcatagory; do
		#		if [[ -z "$(echo "$list" | grep "#" | grep "| $inputcatagory$")" ]]; then
		#			echo -e "${c1}Catagory $inputcatagory not in list, try again.$fg"
		#		else
		#			break
		#		fi
		#	done
		#	echo ""
		#	echo -e "Adding $c1$inputname$fg with $c1$inputtotal$fg episodes to $c1$inputcatagory$fg."
		#	read -p "Is this information correct? [Y/n] " answer
		#	case "$answer" in
		#		[Nn*])
		#			exit
		#			;;
		#		*)
		#			width="$(echo "$inputtotal" | wc -m)"
		#			count="$((5 - width))"
		#			# TODO: space="$(printf " %.0s" $(eval echo "{1..$count}"))"
		#			space="$(printf " %.0s" $(seq "$count"))"

		#			sed -i "/#         \| $inputcatagory/a - \[1\/$inputtotal\]$space\| $inputname" "$configdir/list"
		#			echo ""
		#			echo "Added $inputcatagory to list."

		#			# TODO: Finish sort and uncomment this
		#			# neet -s
		#			;;
		#	esac
		#	;;
		-a|--active)
			info

			# Get count of available media
			available="$(echo "$list" | grep -v "^$\|/\|$name" | nl | sed "s/	/ /g")"
			listcount="$(echo "$available" | wc -l)"

			echo -e "$c1$name$fg is currently active, there are $listcount other available shows:"
			echo ""
			echo "$available"
			echo ""
			read -p "Which show would you like to make active? [1-$listcount] " answer
			if [[ -n "$(seq "$listcount" | grep "^$answer$")" ]]; then
				# TODO: The cut might fuck up if there are less than 10 shows
				active="$(echo "$available" | cut -d $'\n' -f $answer | cut -c 8-)"
				echo ""
				echo -e "The active media is now $c1$active$fg."

				# Remove old +
				sed -i "s/^+ //g" "$configdir/list"

				# Add new +
				sed -i "/$active/ { N; s/\n/&+ /g }" "$configdir/list"
				exit 0
			else
				echo "$answer is not a valid answer."
				exit 1
			fi
			;;
		-d|--debug)
			debug=true
			info
			directory
			episode

			echo -e "${c2}CONFIGURATION$fg"
			echo -e "    configdir = $c1$configdir$fg"
			echo -e "    mediadir = $c1$mediadir$fg"
			echo ""
			echo -e "${c2}FUNCTION - info$fg"
			echo -e "    name = $c1$name$fg"
			echo -e "    current = $c1$current$fg"
			echo -e "    total = $c1$total$fg"
			echo ""
			echo -e "${c2}FUNCTION - directory$fg"
			echo -e "$( echo "$matches" | sed "s/ / = \\$c1/1" | sed "s/$/\\$fg/g" | sed "s/^/    /g")"
			echo ""
			echo -e "    highest = $c1$highest$fg"
			echo -e "    directorycount = $c1$directorycount$fg"
			echo -e "    path = $c1$mediadir/$path$fg"
			echo ""
			echo -e "${c2}FUNCTION - episode$fg"
			echo -e "    episodecount = $c1$episodecount$fg"
			echo -e "    zero = $c1$zero (zerocount = $zerocount)$fg"
			echo -e "    format = $c1$format$fg"
			echo ""
			echo -e "${c2}FUNCTION - play$fg"
			echo "    $mediadir/$path$format"
			if [[ -f "$mediadir/$path$format" ]]; then
				echo -e "    ${c1}File exists!$fg"
				exit 0
			else
				echo -e "    ${c1}File does NOT exist!$fg"
				exit 1
			fi
			;;
		-e|--edit)
			$EDITOR "$configdir/list"
			;;
		+(+))
			info

			# Get current episode and increment it by one
			amount="$(echo "$1" | wc -m)"
			increment="$((current - 1 + amount))"

			shift
			if [[ "$increment" -le "$total" ]]; then
				sed -i "s/+ $current\/$total/+ $increment\/$total/" "$configdir/list"
				current="$increment"

				directory
				episode
				play
			else
				echo -n -e "$c1$name$fg completed! Would you like to remove this show? [y/N] "
				read -p "" answer
				case "$answer" in
					[Yy]*)
						sed -i "/^$name$/d" "$configdir/list"
						sed -i "/^+ /d" "$configdir/list"
						;;
					*)
						exit 0
						;;
				esac
			fi
			shift
			;;
		+(-))
			info

			# Get current episode and decrement it by one
			amount="$(echo "$1" | wc -m)"
			decrement="$((current + 1 - amount))"

			shift
			if [[ "$decrement" -ge 1 ]]; then
				sed -i "s/+ $current\/$total/+ $decrement\/$total/" "$configdir/list"
				current="$decrement"

				directory
				episode
				play
			else
				echo "Can't go lower than 1!"
				exit 1
			fi
			shift
			;;
		-v|--version)
			echo "neet 0.3"
			exit 0
			;;
		*)
			echo "Invalid option, use -h for help."
			exit 1
			;;
	esac
else
	info
	directory
	episode
	play
fi
