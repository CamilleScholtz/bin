#!/bin/fish
#
# neet - A script to easily play and manage your anime/drama/series
# onodera, https://github.com/onodera-punpun

# TODO: doesn't work with directories or files a ' in it

## CONFIGURATION

# Set user config dir location
set configdir $HOME/.neet

# Set example config location
set exampleconfigdir /usr/share/neet


## FUNCTIONS

# This function creates the user config files and dir
function init
	if not test -f $configdir/config -a -f $configdir/list
		if not test -d $configdir
			mkdir $configdir
			touch $configdir/alias
		end

		if test -d $exampleconfigdir
			cp $exampleconfigdir/* $configdir
			echo "Copied example config files to $configdir!"
			echo "Make sure to edit the config and list!"
			exit 0
		else
			echo "Please copy the config files to $configdir!"
			echo "Make sure to edit the config and list afterwards!"
			exit 1
		end
	end
end

# This function gets basic media info, like the active show name, episode count and total episodes
function info
	# Get the active show (+)
	set active (grep -B 1 '+' $configdir/list)

	# Get the show name, current episode and total episode count
	set -g name $active[1]

	if test -z $current
		set -g current (string match -r -a '[0-9]+' $active[2] | head -n 1)
	end
	set -g total (string match -r -a '[0-9]+' $active[2] | tail -n 1)

	# Debug output
	if test $debug = true
		echo 'function info'
		echo "    name = $name"
		echo "    current = $current"
		echo "    total = $total"
		echo

		return
	end
end

# This function tries to fuzzy find the right directory
function directory
	source $configdir/alias

	# Check if the show already has an alias
	if string match -r -q $name $alias[1]; and test $realias = false -a $debug = false
		set -g path $alias[2]
		return
	end

	# Lists all directories in mediadir
	set -g directories (find $mediadir/* -maxdepth 0 -type d | string replace -r '.*/' '')

	# This is the actual fuzzy logic part, it compares the directory names with the active show name
	set matches (
		for directory in $directories
			set match 0

			for word in (string split ' ' $name)
				set wordmatch (string match -r -i -a -n $word $directory | string replace -r '.* ' '')
				if test $status -ge 1
					continue
				end
				set wordmatch (string join ' + ' $wordmatch)

				set match (math $match + $wordmatch)
			end

			echo $match $directory
		end | sort -n
	)

	# This gets the output with the most matches
	set -g path (echo $matches[-1] | cut -d ' ' -f 2-)

	# Debug output
	if test $debug = true
		echo 'function directory'
		echo "    path = $path"
		echo '    directories ='
		for line in $directories
			echo "        $line"
		end
		echo '    matches ='
		for line in $matches
			echo "        $line"
		end
		echo

		return
	end

	# Create alias
	if test -n $path
		echo 'Show initialized. (alias set)'
		echo "set alias '$name' '$path'" > $configdir/alias
	# Throw an error if there are no directory matches
	else 
		echo 'No '(set_color $highlight)'directory'(set_color normal)' match.'
		exit 1
	end
end

# This function tries to get the right file name
function episode
	# Lists all video files in the directory
	set episodes (find $mediadir/$path -type f -regex '.*\.\(avi\|mkv\|mp4\)\(\.part\|\)$' | string replace -r '.*/' '')

	# Sets the right file (hopefully)
	# 'E01', 'EP01'
	set -g file (string match -r -i '.*(E|EP)[0]*'$current'[^0-9].*$' $episodes | head -n 1)
	if test -z $file
		# ' 01', _01' '-01'
		set -g file (string match -r -i '.*( |_|-)[0]*'$current'[^0-9].*$' $episodes | head -n 1)
		if test -z $file
			# Last resort (just the episode number)
			set -g file (string match -r -i '.*[0]*'$current'[^0-9].*$' $episodes | head -n 1)
		end
	end

	# Debug output
	if test $debug = true
		echo 'function episode'
		echo "    file = $file (matching part = "(string match -r -i '[^1-9][0]*'$current'[^0-9]' $episodes)")"
		echo '    episodes ='
		for line in $episodes
			echo "        $line"
		end
		echo
		
		return
	end

	# Throw error if no file is found
	if test -z $file
		echo 'No '(set_color $highlight)'episode'(set_color normal)' match.'
		exit 1
	end
end

# This function executes the userfunction and starts mpv
function play
	# Debug output
	if test $debug = true
		echo 'function play'
		echo "     $playercommand "(string escape $mediadir/$path/$file)
		echo
	end

	echo "Playing episode $current/$total, "(set_color $highlight)"$name"(set_color normal)"."
	if string match -r -q '.part$' $file
		echo 'This episode has not finished downloading yet.'
		echo 'Playback might be buggy or not work at all!'
	end

	# Execute user set config function
	userfunction

	# Start mpv
	eval {$playercommand} (string escape $mediadir/$path/$file)
end


## EXECUTE

# Create and load the user config
init
source $configdir/config

set debug false
set realias false

if test (count $argv) -eq 1
	switch $argv
		case -h --help
			echo -e 'Usage: neet [options] [-/+]\n'
			echo 'options:'
			echo '  -e,   --edit            edit list'
			echo '  -d,   --debug           print some helpful debug ouput'
			echo '  -r,   --realias         forgets current alias'
			echo '  -h,   --help            print help and exit'
			exit 0
		case -e --edit
			eval $EDITOR $configdir/list
			exit 0
		case -d --debug
			set debug true

			info
		case -r --realias
			set realias true

			info
		case '+*'
			# Fail if there is a non + character in argv
			if test -n (string replace -a '+' '' $argv[1])
				echo 'Invalid option, use -h for help.'
				exit 1
			end

			info

			# Get current episode and increment it by one
			set amount (string length $argv)
			set increment (math $current + $amount)

			if test $increment -le $total
				sed -i "s/+ $current\/$total/+ $increment\/$total/" "$configdir/list"
				set current $increment
			else
				echo "Episode $total is the last episode."
				exit 1
			end
		case '-*'
			# Fail if there is a non - character in argv
			# TODO: Use string here
			if test -n (echo $argv[1] | sed 's/-//g')
				echo 'Invalid option, use -h for help.'
				exit 1
			end

			info

			# Get current episode and decrement it by one
			# TODO: Use string here as well
			set amount (echo $argv | wc -m)
			set decrement (math $current + 1 - $amount)

			if test $decrement -ge 1
				sed -i "s/+ $current\/$total/+ $decrement\/$total/" $configdir/list
				set current $decrement
			else
				echo 'There is no episode 0.'
				exit 1
			end
		case '*'
			echo 'Invalid option, use -h for help.'
			exit 1
	end
else
	info
end

directory
episode
play
